#!/usr/bin/env python3

import amino
from tokens import tokenize
from time import sleep
import threading
from googletrans import Translator

HackingUtils = "234960818"
GameDevelopers = "1083667"
HarryPotter = "229032048"
Liberales = "196524014"

ChatComun = "18250370-f950-4ada-8510-650511f9f357"
OffRol = "89eaf028-6c6c-419a-bc15-a4216c69b7fe"
CHAT = "03ee80fc-71b4-424e-a9cb-95b89f328a35"
CHTE = "1302adc2-217e-45ef-ac3e-b9e427e6f658"
BOT = "23e2ffc7-592a-45dd-a2d8-e54c187a5a2b"
TiempoLibre = "801c7692-1cca-4702-b25d-2ca04131d113"
Darth = "83e9eb60-3b0e-4009-8b67-dbe432ddae14"

print("Directions declared")
stop = False
version = "2.0"
excp = {"lack_of_args": "El comando requiere al menos 1 parámetro.", "too_much_args": "Demasiados argumentos.", "intbs": "Numeric argument expected, got string"}

ACHAT = BOT
COMMS = ["HackingUtils", "GameDevelopers", "HarryPotter"]
COMM = HackingUtils

cli = amino.Client()

cli.login("user", "pass")
print("Logged in")
sub = amino.SubClient(COMM, cli.profile)
print("Bot online")

old = []
stop = False
SIG = ""
SIGC = False

def intToBool(x: int) -> str:
    if x == 0:
        return "false"
    if x == 1:
        return "true"

def chats(comm: str, comms: list, sub: object) -> list:
    chatT = sub.get_public_chat_threads().title
    chatI = sub.get_public_chat_threads().chatId
    return chatT, chatI

chatT, chatI = chats("HackingUtils", COMMS, sub)

SS = object

def fochte(COMM, ACHAT, excp, version, stop):
    global SS
    global chatT
    global chatI
    global cli
    global SIG
    sub = amino.SubClient(COMM, cli.profile)
    old = []
    while True:
        msg = sub.get_chat_messages(ACHAT, 2)
        if old == msg.content:
            continue
        for i in msg.content:
            if i in old:
                continue
            if i == None:
                continue
    
            if i.startswith("/"):
                T = tokenize(i)
                if T[0] == "/sig":
                    if len(T) > 2:
                        sub.send_message(ACHAT, excp["too_much_args"])
                        continue
                    if len(T) == 1:
                        sub.send_message(ACHAT, excp["lack_of_args"])
                        continue
                    SIG = T[1].replace('[', '')
                    SIG = SIG.replace(']', '')
                    sub.send_message(ACHAT, "Changed SIG to {}".format(SIG))

                if T[0] == "/help":
                    sub.send_message(ACHAT, """[cb]HackingUtils's Bot
    
[b]Commands

/hello: Devuelve un saludo.
/hi: Devuelve un saludo.
/help: Muestra este mensaje.
/version: Muestra la versión del bot.
/di [String]: Repite lo que se le pide.
/meme [plantilla]: Muestra una plantilla, si no se especifican argumentos muestra un meme aleatorio.

/public_chats: Muestra los chats publicos.
/info [nickname]: Revela información de un usuario.
/goto [numChat]: Envía el bot a otro chat.
/mv [comunidad]: Envía el bot a otra comunidad.
/guard [tiempo]: Repite los mensajes borrados durante N cantidad de tiempo.
/id: Revela la Id del chat y de la comunidad.

/eval [expresion]: Evalúa una expresión matemática.
/teach [command] [answer]: Enseña un comando y su respuesta al bot.
/trad [idioma] [oración]: Traduce una oración a X idioma.
/langdet [oración]: Detecta el idioma de una oración.

/def [termino]: Busca la definición de un término.

/poweroff: Termina el proceso.

Escrito por Darth Venom.""")
                    continue

                if T[0] == "/hello":
                    sub.send_message(ACHAT, "Hello!")
                    continue
    
                if T[0] == "/hi":
                    sub.send_message(ACHAT, "Hi!")
                    continue
    
                if T[0] == "/version":
                    sub.send_message(ACHAT, version)
                    continue

                if T[0] == "/di":
                    if len(T) == 1:
                        sub.send_message(ACHAT, excp["lack_of_args"])
                        continue
                    if len(T) > 2:
                        sub.send_message(ACHAT, excp["too_much_args"])
                        continue
                    sub.send_message(ACHAT, T[1].replace('"', ""))
                    continue
    
                if T[0] == "/meme":
                    if len(T) > 2:
                        sub.send_message(ACHAT, excp["too_much_args"])
                        continue
                    if len(T) == 2:
                        continue
                    continue
    
                if T[0] == "/public_chats":
                    s = ""
                    c = 0
                    for x in chatT:
                        s += "[{}]{}\n".format(c, x)
                        c += 1
                    sub.send_message(ACHAT, s)
    
                if T[0] == "/info":
                    if len(T) > 2:
                        sub.send_message(ACHAT, excp["too_much_args"])
                        continue
                    if len(T) == 1:
                        sub.send_message(ACHAT, excp["lack_of_args"])
                        continue
                    print("Searching for user {}".format(T[1]))
                    user = sub.search_users(T[1])
                    print("Done Searching")
                    if user.json == []:
                        print("User not found")
                        sub.send_message(ACHAT, "User not found")
                        continue
                    sub.send_message(ACHAT, """[cb]{}'s info
    
ID: {}
Publicaciones: {}
Online: {}
Nivel: {}
Reputación: {}

[c]Biografía

{}""".format(user.json[0]["nickname"], user.json[0]["uid"], user.json[0]["blogsCount"], intToBool(int(user.json[0]["onlineStatus"])), user.json[0]["level"], user.json[0]["reputation"], user.json[0]["content"]))
                    continue

                if T[0] == "/goto":
                    if len(T) > 2:
                        sub.send_message(ACHAT, excp["too_much_args"])
                        continue
                    if len(T) == 1:
                        sub.send_message(ACHAT, excp["lack_of_args"])
                        continue
                    if not T[1].isdigit():
                        sub.send_message(ACHAT, excp["intbs"])
                        continue
                    SIG = "{} {}".format(T[0], T[1])
                    continue
                if T[0] == "/mv":
                    if len(T) > 2:
                        sub.send_message(ACHAT, excp["too_much_args"])
                        continue
                    if len(T) == 1:
                        sub.send_message(ACHAT, excp["lack_of_args"])
                        continue

                    if T[1] in COMMS:
                        COM = eval(T[1])
                        print(COM)
                        print(T[1])
                    else:
                        sub.send_message(ACHAT, "Comunidad inexistente.")
                        continue
    
                    sub.send_message(ACHAT, "Yendo a {}".format(COM))
                    #SIG = '/di "Yendo a {}"'.format(COMM)
                    SS = amino.SubClient(COM, cli.profile)
    
                    #public_chats
                    chatTT, chatII = chats(COM, COMMS, SS)
                    s = ""
                    c = 0
                    for x in chatTT:
                        s += "[{}]{}\n".format(c, x)
                        c += 1
                    sub.send_message(ACHAT, s) 
    
                    sub.send_message(ACHAT, "Selecciona un chat por su número.")
                    old1 = []
                    ctrl = False
                    while True:
                        msg = sub.get_chat_messages(ACHAT, 2)
                        if old1 == msg.content:
                            continue
                        for i in msg.content:
                            if i in old:
                                continue
                            if i == None:
                                continue
            
                            elif i.startswith("/"):
                                i = i[1:]
                                print(i)
                                if not i.isdigit():
                                    if i == "back":
                                        del SS
                                        ctrl = True
                                        break
                                    sub.send_message(ACHAT, "Numeric argument expected, got string.")
                                    continue
                                if int(i) >= c:
                                    sub.send_message(ACHAT, "IndexError. Intenta nuevamente.")
                                    continue
                                sub.send_message(ACHAT, "Selected {}".format(i))
                                SIG = '/__SIG_RESERVED'
                                while SIG != "":
                                    sleep(1)
                                print("SIG from thread1")
                                SIG = '/goto {}'.format(i)
                                sleep(2)
                                while SIG != "":
                                    sleep(1)
                                print("SIG from thread2")
                                SIG = '/di "I\'m here"'
                                ctrl = True
                                break
                        old1 = msg.content
                        if ctrl == True:
                            break
                    del ctrl
                    continue

        if stop == True:
            break
        old = msg.content

ME = threading.Thread(target=fochte, args=(COMM, CHTE, excp, version, stop))
ME.start()

while True:
    msg = sub.get_chat_messages(ACHAT, 2)
    if old == msg.content and SIG == "":
        continue
    if SIGC:
        SIG = ""
        SIGC = False

    for i in msg.content:
        if SIG != "" and not SIGC:
            print("SIG is not empty")
            i = SIG
            SIGC = True
        if i in old:
            continue
        if i == None:
            continue

        if i.startswith("/"):
            print(tokenize(i))
            T = tokenize(i)
            if T[0] == "/__SIG_RESERVED":
                sub = SS
                SS = object
                chatT, chatI = chats(COMM, COMMS, sub)
                SIG = ""
                SIGC = False
                print("Done Res")
                continue
            if T[0] == "/help":
                sub.send_message(ACHAT, """[cb]HackingUtils's Bot

[b]Commands

/hello: Devuelve un saludo.
/hi: Devuelve un saludo.
/help: Muestra este mensaje.
/version: Muestra la versión del bot.
/di [String]: Repite lo que se le pide.
/meme [plantilla]: Muestra una plantilla, si no se especifican argumentos muestra un meme aleatorio.

/public_chats: Muestra los chats publicos.
/info [nickname]: Revela información de un usuario.
/goto [numChat]: Envía el bot a otro chat.
/mv [comunidad]: Envía el bot a otra comunidad.
/guard [tiempo]: Repite los mensajes borrados durante N cantidad de tiempo.
/id: Revela la Id del chat y de la comunidad.

/eval [expresion]: Evalúa una expresión matemática.
/teach [command] [answer]: Enseña un comando y su respuesta al bot.
/trad [idioma] [oración]: Traduce una oración a X idioma.
/langdet [oración]: Detecta el idioma de una oración.

/def [termino]: Busca la definición de un término.

/poweroff: Termina el proceso.

Escrito por Darth Venom.""")
                continue

            if T[0] == "/hello":
                sub.send_message(ACHAT, "Hello!")
                continue

            if T[0] == "/hi":
                sub.send_message(ACHAT, "Hi!")
                continue

            if T[0] == "/version":
                sub.send_message(ACHAT, version)
                continue

            if T[0] == "/di":
                if len(T) == 1:
                    sub.send_message(ACHAT, excp["lack_of_args"])
                    continue
                if len(T) > 2:
                    sub.send_message(ACHAT, excp["too_much_args"])
                    continue
                sub.send_message(ACHAT, T[1].replace('"', ""))
                continue

            if T[0] == "/meme":
                if len(T) > 2:
                    sub.send_message(ACHAT, excp["too_much_args"])
                    continue
                if len(T) == 2:
                    continue
                continue

            if T[0] == "/public_chats":
                s = ""
                c = 0
                for x in chatT:
                    s += "[{}]{}\n".format(c, x)
                    c += 1
                sub.send_message(ACHAT, s)

            if T[0] == "/info":
                if len(T) > 2:
                    sub.send_message(ACHAT, excp["too_much_args"])
                    continue
                if len(T) == 1:
                    sub.send_message(ACHAT, excp["lack_of_args"])
                    continue
                print("Searching for user {}".format(T[1]))
                user = sub.search_users(T[1])
                print("Done Searching")
                if user.json == []:
                    print("User not found")
                    sub.send_message(ACHAT, "User not found")
                    continue
                sub.send_message(ACHAT, """[cb]{}'s info

ID: {}
Publicaciones: {}
Online: {}
Nivel: {}
Reputación: {}

[c]Biografía

{}""".format(user.json[0]["nickname"], user.json[0]["uid"], user.json[0]["blogsCount"], intToBool(int(user.json[0]["onlineStatus"])), user.json[0]["level"], user.json[0]["reputation"], user.json[0]["content"]))
                continue

            if T[0] == "/goto":
                if len(T) > 2:
                    sub.send_message(ACHAT, excp["too_much_args"])
                    continue
                if len(T) == 1:
                    sub.send_message(ACHAT, excp["lack_of_args"])
                    continue
                if not T[1].isdigit():
                    sub.send_message(ACHAT, excp["intbs"])
                    continue
                ACHAT = chatI[int(T[1])]
                print(ACHAT)
                sub.join_chat(ACHAT)
                print("Joined")
                continue

            if T[0] == "/mv":
                if len(T) > 2:
                    sub.send_message(ACHAT, excp["too_much_args"])
                    continue
                if len(T) == 1:
                    sub.send_message(ACHAT, excp["lack_of_args"])
                    continue

                if T[1] in COMMS:
                    COMM = eval(T[1])
                else:
                    sub.send_message(ACHAT, "Comunidad inexistente.")
                    continue

                sub.send_message(ACHAT, "Yendo a {}".format(COMM))
                sub1 = amino.SubClient(COMM, cli.profile)

                #public_chats
                chatT, chatI = chats(COMM, COMMS, sub1)
                s = ""
                c = 0
                for x in chatT:
                    s += "[{}]{}\n".format(c, x)
                    c += 1
                sub.send_message(ACHAT, s)


                sub.send_message(ACHAT, "Selecciona un chat por su número.")
                old1 = []
                ctrl = False
                while True:
                    msg = sub.get_chat_messages(ACHAT, 2)
                    if old1 == msg.content:
                        continue
                    for i in msg.content:
                        if i in old:
                            continue
                        if i == None:
                            continue
        
                        elif i.startswith("/"):
                            i = i[1:]
                            print(i)
                            if not i.isdigit():
                                if i == "back":
                                    del sub1
                                    ctrl = True
                                    break
                                sub.send_message(ACHAT, "Numeric argument expected, got string.")
                                continue
                            if int(i) >= c:
                                sub.send_message(ACHAT, "IndexError. Intenta nuevamente.")
                                continue
                            sub.send_message(ACHAT, "Selected {}".format(i))
                            ACHAT = chatI[int(i)]
                            sub1.join_chat(ACHAT)
                            sub = sub1
                            sub.send_message(ACHAT, "I'm here")
                            del sub1
                            ctrl = True
                            break
                    old1 = msg.content
                    if ctrl == True:
                        break
                del ctrl
                continue

    if stop == True:
        break
    old = msg.content

print("Going offline")
cli.logout()
del amino
exit()
