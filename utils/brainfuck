#!/usr/bin/env python3

#brainfuck diagrams

from token import tokenize

class MemTable:
    def __init__(self):
        self.A = []
        self.P = 0
        self.S = ""
        self.W = False
        self.T = ""
        self.S1 = True
        self.ST = False

    def IMB(self):
        MB = input("memblocks> ")
        if not MB.isdigit():
            print("mem error.")
            exit()
        return MB
    def CMB(self, x):
        self.A = []
        for i in range(int(x)):
            self.A.append(0)
    def PMB(self):
        S = ""
        for i in self.A:
            S += "[{}]".format(i)
        print(S)
    def SWB(self, x):
        x = x.replace("#", "")
        L = tokenize(x)
        if L == []:
            return ""
        if L[0] == "Pmemblocks=":
            if L[1] == "1":
                self.S1 = True
            if L[1] == "0":
                self.S1 = False
            else:
                return ""
        else:
            return ""
#        if L[0] == ""
    def WMB(self, x):
        while self.A[self.P] != 0:
            for i in x:
                if i == ']':
                    self.W = False
                    self.WMB(self.T)
                    continue
                if self.W == True:
                    self.T += i
                    continue
                if i == '+':
                    if self.A[self.P] == 256:
                        continue
                    self.A[self.P] += 1
                    continue
                if i == '-':
                    if self.A[self.P] == 0:
                        continue
                    self.A[self.P] -= 1
                    continue
                if i == '<':
                    if self.P == 0:
                        continue
                    self.P -= 1
                    continue
                if i == '>':
                    if self.P == int(MB)-1:
                        continue
                    self.P += 1
                    continue
                if i == '.':
                    self.S += chr(self.A[self.P])
                    continue
                if i == ',':
                    I = input()
                    self.A[self.P] = ord(I[0])
                    continue
                if i == '[':
                    self.W = True
                    continue

M = MemTable()

MB = M.IMB()

M.CMB(MB)
M.PMB()

while True:
    B = input("code> ")
    M.S = ""
    M.W = False
    M.T = ""
    for i in B:
        if M.ST:
            if i == '#':
                M.ST = False
                M.SWB(M.T)
                M.T = ""
                continue
            M.T += i
            continue
        if i == '#':
            M.ST = True
            continue
        if i == ']':
            M.W = False
            M.WMB(M.T)
            M.T = ""
            continue
        if M.W:
            M.T += i
            continue
        if i == '*':
            MB = M.IMB()
            M.CMB(MB)
            continue
        if i == '+':
            M.A[M.P] += 1
            continue
        if i == '-':
            if M.A[M.P] == 0:
                continue
            M.A[M.P] -= 1
            continue
        if i == '<':
            if M.P == 0:
                continue
            M.P -= 1
            continue
        if i == '>':
            if M.P == int(MB)-1:
                continue
            M.P += 1
            continue
        if i == '.':
            M.S += chr(M.A[M.P])
            continue
        if i == ',':
            I = input()
            M.A[M.P] = ord(I[0])
            continue
        if i == '[':
            M.W = True
            continue
    if M.S != "":
        print(M.S)
    if M.S1:
        M.PMB()
